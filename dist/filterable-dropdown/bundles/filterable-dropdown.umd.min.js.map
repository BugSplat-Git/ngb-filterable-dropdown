{"version":3,"sources":["ng://filterable-dropdown/lib/selection-type.ts","ng://filterable-dropdown/lib/filterable-dropdown.component.ts","ng://filterable-dropdown/lib/multi-select-pipe/multi-select-pipe.ts","ng://filterable-dropdown/lib/filterable-dropdown.module.ts"],"names":["SelectionType","FilterableDropdownComponent","changeDetector","this","faCheck","SELECT_ALL","SELECT_NONE","selected","Set","filtered","autoClose","items","disabled","allowMultiSelect","onItemsSelected","EventEmitter","onOpen","nextToggleState","searchForm","FormGroup","searchInput","FormControl","Object","defineProperty","prototype","arr","Array","from","selection","searchInputValue","length","size","ngOnInit","_this","get","valueChanges","subscribe","value","lowerCaseSearchInputValue","toLowerCase","filteredValues","filter","item","indexOf","onSelectAll","resetFilterInput","emit","selectedItems","onSelectNone","onItemSelect","has","delete","add","onOpenChange","open","detectChanges","search","nativeElement","focus","onEnterKeyPressed","forEach","setValue","isFiltered","isSelected","controls","Component","args","selector","template","ChangeDetectorRef","Input","Output","ViewChild","static","MultiSelectPipe","transform","val","ALL_ITEMS_STRING","MULTIPLE_ITEMS_STRING","Pipe","name","FilterableDropdownModule","NgModule","declarations","imports","FormsModule","ReactiveFormsModule","CommonModule","NgbModule","FontAwesomeModule","exports"],"mappings":"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","sourcesContent":["export enum SelectionType {\r\n    All = \"Select All\",\r\n    None = \"Select None\"\r\n}  ","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { SelectionType } from './selection-type';\r\n\r\nexport interface FilterableItem {\r\n  value: string,\r\n  selected: boolean,\r\n}\r\n\r\n@Component({\r\n  selector: 'bugsplat-filterable-dropdown',\r\n  templateUrl: './filterable-dropdown.component.html',\r\n  styleUrls: ['./filterable-dropdown.component.scss']\r\n})\r\nexport class FilterableDropdownComponent implements OnInit {\r\n\r\n  public faCheck = faCheck;\r\n  public readonly SELECT_ALL = SelectionType.All;\r\n  public readonly SELECT_NONE = SelectionType.None;\r\n\r\n  public selected = new Set();\r\n  public filtered = new Set();\r\n\r\n  @Input() autoClose: boolean | \"outside\" | \"inside\" = \"outside\";\r\n  @Input() items: Array<string> = [];\r\n  @Input() set selectedItems(selection: string | Array<string>) {\r\n    if (typeof selection === \"string\") {\r\n      this.selected = new Set([selection])\r\n    } else {\r\n      this.selected = new Set(selection);\r\n    }\r\n  } \r\n  @Input() disabled: boolean = false;\r\n  @Input() allowMultiSelect: boolean = true;\r\n  @Input() placeholder: string;\r\n\r\n  @Output() onItemsSelected: EventEmitter<Array<string> | string> = new EventEmitter<Array<string> | string>();\r\n  @Output() onOpen: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @ViewChild('search', { static: true }) search: ElementRef;\r\n  @ViewChild('dropdown', { static: true }) dropdown: ElementRef;\r\n\r\n  public get allowToggleSelectAll(): boolean {\r\n    return (this.allowMultiSelect && this.searchInputValue.length === 0);\r\n  }\r\n\r\n  public get noItemsToDisplay(): boolean {\r\n    return this.filtered.size === 0;\r\n  }\r\n\r\n  nextToggleState: SelectionType = this.SELECT_ALL;\r\n\r\n  searchForm = new FormGroup({\r\n    searchInput: new FormControl()\r\n  });\r\n\r\n  constructor(private changeDetector: ChangeDetectorRef) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.filtered = new Set(this.items);\r\n    this.searchForm.get(\"searchInput\").valueChanges.subscribe(value => {\r\n      if (!value) {\r\n        this.filtered = new Set(this.items);\r\n        return;\r\n      }\r\n  \r\n      const lowerCaseSearchInputValue = value.toLowerCase();\r\n      const filteredValues = this.items.filter(item => item.toLowerCase().indexOf(lowerCaseSearchInputValue) !== -1);\r\n  \r\n      this.filtered = new Set(filteredValues);\r\n    });\r\n  }\r\n\r\n  get selectedItems(): Array<string> | string {\r\n    let arr: Array<any> = Array.from(this.selected);\r\n    if (this.allowMultiSelect) {\r\n      return arr;\r\n    } else {\r\n      if (arr) {\r\n        return arr[0]\r\n      } else {\r\n        return \"\";\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  onSelectAll(): void {\r\n    this.nextToggleState = this.SELECT_NONE;\r\n    this.selected = new Set(this.items);\r\n    this.resetFilterInput();\r\n    this.onItemsSelected.emit(this.selectedItems);\r\n  }\r\n\r\n  onSelectNone(): void {\r\n    this.nextToggleState = this.SELECT_ALL;\r\n    this.selected = new Set([]);\r\n    this.resetFilterInput();\r\n    this.onItemsSelected.emit(this.selectedItems);\r\n  }\r\n\r\n  onItemSelect(item: string) {\r\n    if (this.allowMultiSelect) {\r\n      if (this.selected.has(item)){\r\n        this.selected.delete(item);\r\n      } else {\r\n        this.selected.add(item);\r\n      }\r\n    } else {\r\n      this.selected = new Set([item]);\r\n    }\r\n    this.onItemsSelected.emit(this.selectedItems);\r\n    this.resetFilterInput();\r\n  }\r\n\r\n  onOpenChange(open): void {\r\n    if (open) {\r\n      this.changeDetector.detectChanges();\r\n      this.search.nativeElement.focus();\r\n      this.onOpen.emit();\r\n    }\r\n  }\r\n\r\n  onEnterKeyPressed(): void {\r\n    if (this.allowMultiSelect) {\r\n      this.filtered.forEach(item => {\r\n        if (!this.selected.has(item)) {\r\n          this.selected.add(item);\r\n        }\r\n      });\r\n    } else {\r\n      if (this.filtered && this.filtered.size) {\r\n        this.selected = new Set([this.filtered[0]]);\r\n      } \r\n    }\r\n\r\n    this.onItemsSelected.emit(this.selectedItems);\r\n    this.resetFilterInput();\r\n  }\r\n\r\n  private resetFilterInput(): void {\r\n    this.searchInput.setValue(\"\");\r\n  }\r\n\r\n  public isFiltered(value: string): boolean {\r\n    return this.filtered.has(value);\r\n  }\r\n\r\n  public isSelected(value: string): boolean {\r\n    return this.selected.has(value);\r\n  }\r\n\r\n  get searchInput(): AbstractControl {\r\n    return this.searchForm.controls[\"searchInput\"];\r\n  }\r\n\r\n  get searchInputValue(): string {\r\n    return this.searchInput.value || \"\";\r\n  }\r\n}","import { PipeTransform, Pipe } from \"@angular/core\";\r\nimport { FilterableItem } from '../filterable-dropdown.component';\r\n\r\n@Pipe({\r\n  name: 'multiSelect'\r\n})\r\nexport class MultiSelectPipe implements PipeTransform {\r\n\r\n  public static readonly ALL_ITEMS_STRING = \"All\";\r\n  public static readonly MULTIPLE_ITEMS_STRING = \"Multiple\";\r\n\r\n  transform(val: Array<string> | string): string {\r\n    if (typeof val === \"string\") {\r\n      if (!val) {\r\n        return MultiSelectPipe.ALL_ITEMS_STRING;\r\n      }\r\n      else {\r\n        return val;\r\n      }\r\n    }\r\n    else if (val instanceof Array) {\r\n      if (val.length === 0) {\r\n        return MultiSelectPipe.ALL_ITEMS_STRING;\r\n      } else if (val.length === 1) {\r\n        return val[0];\r\n      } else {\r\n        return MultiSelectPipe.MULTIPLE_ITEMS_STRING;\r\n      }\r\n    }\r\n  }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FilterableDropdownComponent } from './filterable-dropdown.component';\r\nimport { MultiSelectPipe } from './multi-select-pipe/multi-select-pipe';\r\n\r\n@NgModule({\r\n  declarations: [FilterableDropdownComponent, MultiSelectPipe],\r\n  imports: [FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    NgbModule,\r\n    FontAwesomeModule\r\n  ],\r\n  exports: [FilterableDropdownComponent]\r\n})\r\nexport class FilterableDropdownModule { }\r\n"]}